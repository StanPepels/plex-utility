<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Plex_Util">
  <!-- Define Colors -->
  <Color x:Key="PrimaryColor">#007ACC</Color>
  <Color x:Key="SecondaryColor">#04568c</Color>
  <Color x:Key="BackgroundColor">#F0F0F0</Color>

  <!-- Define Brushes -->
  <SolidColorBrush x:Key="PrimaryBrush" Color="{StaticResource PrimaryColor}" />
  <SolidColorBrush x:Key="SecondaryBrush" Color="{StaticResource SecondaryColor}" />
  <SolidColorBrush x:Key="BackgroundBrush" Color="{StaticResource BackgroundColor}" />

  <!-- Global Styles -->
  <Style TargetType="Window">
    <Setter Property="Background" Value="{StaticResource BackgroundBrush}" />
  </Style>

  <Style TargetType="Button">
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Padding" Value="10,5" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border Background="{TemplateBinding Background}" 
                            CornerRadius="5"
                            Padding="{TemplateBinding Padding}">
            <ContentPresenter HorizontalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>
            <!-- Hover Effect -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
            </Trigger>

            <!-- Pressed Effect -->
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Background" Value="DarkSlateGray" />
            </Trigger>

            <!-- Disabled State -->
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" Value="Gray" />
              <Setter Property="Foreground" Value="LightGray" />
              <Setter Property="Cursor" Value="Arrow"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="Button" x:Key="ActionButton">
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Padding" Value="10,5" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border Background="{TemplateBinding Background}" 
                            CornerRadius="5"
                            Padding="{TemplateBinding Padding}">
            <ContentPresenter HorizontalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>
            <!-- Hover Effect -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
              <Setter Property="Cursor" Value="Hand"/>
            </Trigger>

            <!-- Pressed Effect -->
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Background" Value="DarkSlateGray" />
            </Trigger>

            <!-- Disabled State -->
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" Value="Gray" />
              <Setter Property="Foreground" Value="LightGray" />
              <Setter Property="Cursor" Value="Arrow"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="Button" x:Key="ActionButtonDelete" BasedOn="{StaticResource ActionButton}">
    <Setter Property="Background" Value="#d9020d" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Border Background="{TemplateBinding Background}" 
                            CornerRadius="5"
                            Padding="{TemplateBinding Padding}">
            <ContentPresenter HorizontalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>
            <!-- Hover Effect -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="#540307" />
              <Setter Property="Cursor" Value="Hand"/>
            </Trigger>

            <!-- Pressed Effect -->
            <Trigger Property="IsPressed" Value="True">
              <Setter Property="Background" Value="#540307" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="ToggleButton">
    <Setter Property="Background" Value="{StaticResource PrimaryBrush}" />
    <Setter Property="Foreground" Value="White" />
    <Setter Property="FontSize" Value="14" />
    <Setter Property="Padding" Value="10,5" />
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ToggleButton">
          <Border Background="{TemplateBinding Background}" 
                            CornerRadius="5"
                            Padding="{TemplateBinding Padding}">
            <ContentPresenter HorizontalAlignment="Center" />
          </Border>
          <ControlTemplate.Triggers>
            <!-- Hover Effect -->
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{StaticResource SecondaryBrush}" />
            </Trigger>

            <!-- Pressed Effect -->
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Background" Value="DarkSlateGray" />
            </Trigger>

            <!-- Disabled State -->
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" Value="Gray" />
              <Setter Property="Foreground" Value="LightGray" />
              <Setter Property="Cursor" Value="Arrow"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TreeViewItemFocusVisual">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>




  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Fill" Color="#FF595959"/>
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Checked.Stroke" Color="#FF262626"/>
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Stroke" Color="#FF27C7F7"/>
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Fill" Color="#FFCCEEFB"/>
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Stroke" Color="#FF1CC4F7"/>
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.MouseOver.Checked.Fill" Color="#FF82DFFB"/>
  <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Fill" Color="#FFFFFFFF"/>
  <SolidColorBrush x:Key="TreeViewItem.TreeArrow.Static.Stroke" Color="#FF818181"/>




  <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="Width" Value="16"/>
    <Setter Property="Height" Value="16"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ToggleButton}">
          <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
            <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="{StaticResource TreeViewItem.TreeArrow.Static.Fill}" Stroke="{StaticResource TreeViewItem.TreeArrow.Static.Stroke}">
              <Path.RenderTransform>
                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
              </Path.RenderTransform>
            </Path>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="RenderTransform" TargetName="ExpandPath">
                <Setter.Value>
                  <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                </Setter.Value>
              </Setter>
              <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Fill}"/>
              <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.Static.Checked.Stroke}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Stroke}"/>
              <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Fill}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsMouseOver" Value="True"/>
                <Condition Property="IsChecked" Value="True"/>
              </MultiTrigger.Conditions>
              <Setter Property="Stroke" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Stroke}"/>
              <Setter Property="Fill" TargetName="ExpandPath" Value="{StaticResource TreeViewItem.TreeArrow.MouseOver.Checked.Fill}"/>
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>







  <Style TargetType="{x:Type TreeViewItem}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
    <Setter Property="Padding" Value="1,0,0,0"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TreeViewItem}">
          <Grid>
            <Grid.ColumnDefinitions>
              <ColumnDefinition MinWidth="19" Width="Auto"/>
              <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="Auto"/>
              <RowDefinition/>
            </Grid.RowDefinitions>
            <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
            <Border x:Name="Bd" Grid.Column="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
              <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
            <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="false">
              <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="HasItems" Value="false">
              <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="true">
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="IsSelected" Value="true"/>
                <Condition Property="IsSelectionActive" Value="false"/>
              </MultiTrigger.Conditions>
              <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="false">
              <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="ItemsControl.AlternationIndex"  Value="0">
        <Setter Property="Background" Value="Transparent" />
      </Trigger>
      <Trigger Property="ItemsControl.AlternationIndex"  Value="1">
        <Setter Property="Background" Value="#40999999" />
      </Trigger>
      <Trigger Property="VirtualizingPanel.IsVirtualizing" Value="true">
        <Setter Property="ItemsPanel">
          <Setter.Value>
            <ItemsPanelTemplate>
              <VirtualizingStackPanel/>
            </ItemsPanelTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style TargetType="ListViewItem">
    <Style.Triggers>
      <Trigger Property="ItemsControl.AlternationIndex"  Value="0">
        <Setter Property="Background" Value="#40999999" />
      </Trigger>
      <Trigger Property="ItemsControl.AlternationIndex"  Value="1">
        <Setter Property="Background" Value="Transparent" />
      </Trigger>
    </Style.Triggers>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ListViewItem}">
          <Border Background="{TemplateBinding Background}">
            <ContentPresenter />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="DisabledButtonStyle" TargetType="Button">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="Button">
          <Grid>
            <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="1" BorderBrush="Black" Padding="5,0">
              <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Border>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" Value="#FFD9D9D9" />
              <Setter Property="Foreground" Value="Gray" />
              <Setter TargetName="border" Property="BorderThickness" Value="0" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="Background" Value="#b52424" />
    <Setter Property="Foreground" Value="White" />
  </Style>
</ResourceDictionary>